#include <iostream>

using namespace std;

int main(int argc, char const *argv[])
{
    int n[] = {0, 0, 2, 4, 2, 4, 4, 8, 2, 4, 4, 8, 4, 8, 8, 16, 2, 4, 4, 8, 4, 8, 8, 16, 4, 8, 8, 16, 8, 16, 16, 32, 2, 4, 4, 8, 4, 8, 8, 16, 4, 8, 8, 16, 8, 16, 16, 32, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 2, 4, 4, 8, 4, 8, 8, 16, 4, 8, 8, 16, 8, 16, 16, 32, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 2, 4, 4, 8, 4, 8, 8, 16, 4, 8, 8, 16, 8, 16, 16, 32, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 2, 4, 4, 8, 4, 8, 8, 16, 4, 8, 8, 16, 8, 16, 16, 32, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 32, 64, 64, 128, 64, 128, 128, 256, 64, 128, 128, 256, 128, 256, 256, 512, 2, 4, 4, 8, 4, 8, 8, 16, 4, 8, 8, 16, 8, 16, 16, 32, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 32, 64, 64, 128, 64, 128, 128, 256, 64, 128, 128, 256, 128, 256, 256, 512, 4, 8, 8, 16, 8, 16, 16, 32, 8, 16, 16, 32, 16, 32, 32, 64, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 32, 64, 64, 128, 64, 128, 128, 256, 64, 128, 128, 256, 128, 256, 256, 512, 8, 16, 16, 32, 16, 32, 32, 64, 16, 32, 32, 64, 32, 64, 64, 128, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 32, 64, 64, 128, 64, 128, 128, 256, 64, 128, 128, 256, 128, 256, 256, 512, 16, 32, 32, 64, 32, 64, 64, 128, 32, 64, 64, 128, 64, 128, 128, 256, 32, 64, 64, 128, 64, 128, 128, 256, 64, 128, 128, 256, 128, 256, 256, 512, 32, 64, 64, 128, 64, 128, 128, 256, 64, 128, 128, 256, 128, 256, 256, 512, 64, 128, 128, 256, 128, 256, 256, 512, 128, 256,256};
    int numero=0;
    cin>> numero;
    if(numero>=2&&numero<=1018)
        cout<<n[numero]<<endl;
    else
    {
        cout<<'2'<<endl;
    }
    
    return 0;
}
